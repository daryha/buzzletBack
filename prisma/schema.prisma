generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  avatar String? @default("https://i.pinimg.com/474x/65/1c/6d/651c6da502353948bdc929f02da2b8e0.jpg?nii=t")

  posts    Post[]
  comments Comment[]
  Like     Like[]
  View     View[]

  @@map("user")
}

model Post {
  id          String   @id @default(uuid())
  title       String
  description String
  text        String
  bannerImg   String?  @map("banner_img")
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  tags     Tag[]
  comments Comment[]
  likes    Like[]
  views    View[]

  @@index([authorId, createdAt])
  @@index([published])
  @@map("post")
}

model Tag {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  posts Post[]

  @@map("tag")
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@map("comment")
}

model Like {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, postId])
  @@map("like")
}

model View {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  ip        String
  userId    String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@unique([postId, ip])
  @@map("view")
}
